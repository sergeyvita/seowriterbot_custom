from flask import Flask, request, jsonify
from openai import OpenAI
import os
import re

app = Flask(__name__)

api_key = os.environ.get("OPENAI_API_KEY")
client = OpenAI(api_key=api_key)

@app.route("/generate", methods=["POST"])
def generate():
    try:
        data = request.get_json()
        custom_input = data.get("custom_input", "")
        chunks = data.get("chunks", [])

        if not custom_input and chunks:
            custom_input = "\n".join([chunk.strip() for chunk in chunks if isinstance(chunk, str)])

        custom_input = custom_input.strip()
        
        if not custom_input:
            return jsonify({"error": "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"}), 400

        full_prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä. 

–ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–æ–∑–¥–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é, —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é, –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É ‚Äî –¥–ª—è —Å–µ–±—è, –¥–µ—Ç–µ–π, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π, —Å–¥–∞—á–∏ –≤ –∞—Ä–µ–Ω–¥—É, –ø–æ –∏–ø–æ—Ç–µ–∫–µ, –≤ —Ä–∞—Å—Å—Ä–æ—á–∫—É –∏–ª–∏ –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–µ.

–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å **–∂–∏–≤–æ–π –∏ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ-–ø–æ–∑–∏—Ç–∏–≤–Ω–æ–π**, —Å —è—Ä–∫–∏–º –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ–º, –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏, –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∏ —Ñ–∞–∫—Ç–∞–º–∏ (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ). –ü–µ—Ä–µ—Ä–∞–±–æ—Ç–∞–π —Ç–µ–∫—Å—Ç, —É—Å–∏–ª–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ü–∏—é, –¥–æ–±–∞–≤–∏–≤ —Å—Ç–∏–ª—å, —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ SEO.

**–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:**
- –û–±—ä—ë–º ‚Äî –Ω–µ –º–µ–Ω–µ–µ 3900 —Å–∏–º–≤–æ–ª–æ–≤
- –ë–µ–∑ —ç–º–æ–¥–∑–∏
- –í—Å–µ –≤–∞–∂–Ω—ã–µ –º—ã—Å–ª–∏ –≤—ã–¥–µ–ª—è–π –∂–∏—Ä–Ω—ã–º –∏–ª–∏ –∫—É—Ä—Å–∏–≤–æ–º (Markdown)
- –í–∫–ª—é—á–∞–π –≤—ã—Å–æ–∫–æ—á–∞—Å—Ç–æ—Ç–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ —Ç–µ–º–µ (–ø–æ–∫—É–ø–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∏–ø–æ—Ç–µ–∫–∞, –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä.)
- –í –∫–æ–Ω—Ü–µ —Å—Ç–∞—Ç—å–∏ –¥–æ–±–∞–≤—å **—Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –ó–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤** ‚Äî https://ap-r.ru
- –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–∫–æ–±–∫–∏, markdown-—Å—Å—ã–ª–∫–∏. –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É ‚Äú–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –ê—Å—Å–æ—Ü–∏–∞—Ü–∏–∏ –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–æ–≤‚Äù

–¢–∞–∫–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π:

2. ‚úèÔ∏è *–ó–∞–≥–æ–ª–æ–≤–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞* ‚Äî –¥–æ 100 —Å–∏–º–≤–æ–ª–æ–≤

3. üìà *META TITLE* ‚Äî –¥–æ 60 —Å–∏–º–≤–æ–ª–æ–≤

4. üîë *META KEYWORDS* ‚Äî –Ω–µ –º–µ–Ω–µ–µ 25 –∫–ª—é—á–µ–≤—ã—Ö —Ñ—Ä–∞–∑ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

5. üìù *META DESCRIPTION* ‚Äî –¥–æ 500 —Å–∏–º–≤–æ–ª–æ–≤, –Ω–µ –¥–æ–ª–∂–Ω–æ –æ–±—Ä—ã–≤–∞—Ç—å—Å—è

–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç:
{custom_input}

–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:

===ELEMENT_NAME===
{{–∑–∞–≥–æ–ª–æ–≤–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–∞}}

===META_TITLE===
{{–º–µ—Ç–∞ —Ç–∞–π—Ç–ª}}

===META_KEYWORDS===
{{–∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞}}

===META_DESCRIPTION===
{{–º–µ—Ç–∞ –æ–ø–∏—Å–∞–Ω–∏–µ}}

===ARTICLE===
{{–ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç—å–∏}}
"""

        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": full_prompt}],
            temperature=0.8
        )

        content = response.choices[0].message.content.strip()

        def extract_block(tag):
            match = re.search(rf"==={tag}===\s*(.+?)(?=(?:===|$))", content, re.DOTALL)
            return match.group(1).strip() if match else ""

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
        element_name = extract_block("ELEMENT_NAME")
        meta_title = extract_block("META_TITLE")
        meta_keywords = extract_block("META_KEYWORDS")
        meta_description = extract_block("META_DESCRIPTION")
        article_text = extract_block("ARTICLE")

        # üî• –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–∏–Ω–∫–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        image_prompt = (
            f"A magical, atmospheric illustration in the style of Disney animated films, "
            f"inspired by the meaning and content of the following article about real estate in Russia:\n\n"
            f"{article_text[:500]}\n\n"
            f"The illustration should metaphorically and visually convey the core idea of the article ‚Äî "
            f"whether it's about buying a home, financial analytics, commercial real estate, urban development, "
            f"investments, or economic trends.\n\n"
            f"The composition may include, depending on the article's theme, cities, neighborhoods, and characters "
            f"interacting with the environment: families, experts, builders, dreamers, or buyers. "
            f"The color palette should be warm and inspiring. It's important to preserve the spirit of hope, dreams, "
            f"and the future ‚Äî as in classic Disney works ‚Äî while keeping the illustration modern and thematically "
            f"tied to real estate, without being a direct copy of photos or architectural plans.\n\n"
            f"The visual style should be expressive, soft, and detail-oriented. Characters should appear kind and sincere, "
            f"and scenes should be metaphorical. The illustration must be created based on the content of the article above."
        )    

            image_url = None
        try:
            image_response = client.images.generate(
                model="dall-e-3",
                prompt=image_prompt,
                n=1,
                size="1792x1024",
                quality="hd",
                style="natural""
            )
            image_url = image_response.data[0].url
        except Exception as e:
            print("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:", e)

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤—Å—ë –≤–º–µ—Å—Ç–µ
        return jsonify({
            "element_name": element_name,
            "meta_title": meta_title,
            "meta_keywords": meta_keywords,
            "meta_description": meta_description,
            "article": article_text,
            "image_url": image_url
        })

    except Exception as e:
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=10000)
